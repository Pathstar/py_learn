  61. 什么是 MRO？
MRO 是 Method Resolution Order 的缩写，意思是“方法解析顺序”。
它指的是：当多个父类里有同名方法或者属性时，Python 在查找时按照什么顺序找。

理解 MRO 对多继承很重要，它可以解决“菱形继承”中的调用混乱问题。

2. 单继承的 MRO
最简单的情况，单继承：

class A:
    def hello(self):
        print("A")
class B(A):
    pass
obj = B()
obj.hello()  # 输出 A
python
查找顺序： B → A → object（内置终极父类）

3. 多继承和菱形继承
例如：

class A:
    def hello(self):
        print("A")
class B(A):
    def hello(self):
        print("B")
class C(A):
    def hello(self):
        print("C")
class D(B, C):
    pass
obj = D()
obj.hello()
python
这里出现了多继承！

D 继承了 B 和 C，B 和 C 都继承了 A。这形成了“菱形继承”。

4. Python 的 MRO 规则（C3 线性化）
Python 3 使用的是 C3 线性化算法。

大白话讲解原则：
优先查找自己类
从左到右依次查找父类
每个类只查找一次（不会重复）
保证子类比父类优先
如果父类有多个共同祖先，按照继承列表顺序保证一致性
5. 如何查看 MRO？
可以用 类名.__mro__ 或 类名.mro()

print(D.__mro__)
# (<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>)
python
6. 用例讲解
例子：
class A: pass
class B(A): pass
class C(A): pass
class D(B, C): pass
python
print(D.mro())
# 输出:
# [<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>]
python
首先查找 D
再查找 B
再查找 C（虽然 B 和 C 都继承了 A，但不会重复查找）
然后查找 A
最后 object
7. 复杂点的例子
class A: pass
class B(A): pass
class C(A): pass
class E: pass
class D(B, C, E): pass
print(D.mro())
python
输出：

[<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class '__main__.E'>, <class 'object'>]
8. 简单口诀记忆
口诀：

自己优先、从左到右、各查一次、遇到重复不回头！
9. 总结
MRO 决定了多继承时方法属性的搜索顺序
可用 mro() 、__mro__ 查看
按“自己-左-右-祖先”顺序（不是简单的深度/广度优先，是 C3 算法）
实际多继承写代码时遵循“左侧优先”即可
10. 练习
试着判断下面的MRO顺序，并用mro()验证：

class F: pass
class E: pass
class D(E, F): pass
class C: pass
class B(C, D): pass
class A(B): pass
print(A.mro())
python
试着手动理顺继承顺序，对照输出练习一下～